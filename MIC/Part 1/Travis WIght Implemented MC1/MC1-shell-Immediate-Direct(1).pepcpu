//Travis Wight

1.          // SHELL for MC1-1---Implement the 'CO/FO' steps
// CO/FO - the 'Address Modes is Predetermined' so just use that information to Fetch the Operand
//
// Mode=IMMEDIATE - The Instruction's Operand specifier, holds the ACTUAL operand, nothing to do!!!
//
//the next line allows us to initialize regs and memory
UnitPre: IR=0xAB0002, PC=0x000F, Mem[0x0002]=0x1234, T2=0x0000, T3=0x0000
//the next line allows us to specify/verify the expected values after execution
UnitPost: IR=0xAB0002, PC=0x00F, T2=0x1234, T3=0x0003
//Mode=DIRECT - The Instruction's Operand specifier, holds the EA, just use it to retrieve the Operand
// MAR <- IR-OS
2. A=9,B=10;MARCk
// CR <- 'R'
3. MemRead
// MDR <- Memory
4. MemRead, MDRMux=0; MDRCk
// ALU <- MDR, ALU <- 'Passthrough', T2(High) <- ALU 
5. AMux=0, ALU=0, CMux=1, C=12; LoadCk
// T3(15) <- IR(10) + 1, low-order byte first.
6. A=10, B=23, AMux=1, ALU=1, CMux=1, ANDZ=0, C=15; CCk, LoadCk
// T3(14) <- IR(9) + 0, high-order byte last.
7. A=9, B=22, AMux=1, ALU=2, CMux=1, ANDZ=1, C=14; NCk, ZCk, VCk, CCk, LoadCk 
//
// MAR <- T3...
8. A=14,B=15;MARCk
// CR <- 'R'
9. MemRead
// MDR <- Memory
10. MemRead, MDRMux=0; MDRCk
// ALU <- MDR, ALU <- 'Passthrough', T2(Low) <- ALU 
11. AMux=0, ALU=0, CMux=1, C=13; LoadCk
//
// ...DONE, the Instruction has been loaded to the IR....
