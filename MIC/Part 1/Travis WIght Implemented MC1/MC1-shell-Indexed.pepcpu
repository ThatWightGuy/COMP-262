// Travis Wight

// SHELL for MC1---Implement the 'CO/FO' steps
// CO/FO - the 'Address Modes is Predetermined' so just use that information to Fetch the Operand
//
// Mode=INDEXED - The EA is calculated as: the Instruction's Operand Specifier plus the contents of the INDEX reg. 
// the next line allows us to initialize regs and memory
UnitPre:  IR=0xAB0000, PC=0x000F, X=0x0002, Mem[0x0002]=0x1234, T2=0x0000, T3=0x0000 
// the next line allows us to specify/verify the expected values after execution
UnitPost: IR=0xAB0000, PC=0x000F, X=0x0002, T2=0x1234, T3=0x0003
//
// T3(15) <- IR(10) + X(3), low-order byte first.
1. A=10, B=3, AMux=1, ALU=1, CMux=1, ANDZ=0, C=15; CCk, LoadCk
// T3(14) <- IR(9) + X(2), high-order byte last.
2. A=9, B=2, AMux=1, ALU=2, CMux=1, ANDZ=1, C=14; NCk, ZCk, VCk, CCk, LoadCk 
// T3 now holds the EA, proceed to fetch operands just like for Direct...
// MAR <- T3...
3. A=14,B=15;MARCk
// CR <- 'R'
4. MemRead
// MDR <- Memory
5. MemRead, MDRMux=0; MDRCk
// ALU <- MDR, ALU <- 'Passthrough', T2(High) <- ALU 
6. AMux=0, ALU=0, CMux=1, C=12; LoadCk
// T3(15) <- T3(15) + 1, low-order byte first.
7. A=15, B=23, AMux=1, ALU=1, CMux=1, ANDZ=0, C=15; CCk, LoadCk
// T3(14) <- T3(14) + 0, high-order byte last.
8. A=14, B=22, AMux=1, ALU=2, CMux=1, ANDZ=1, C=14; NCk, ZCk, VCk, CCk, LoadCk 
//
// MAR <- T3...
9. A=14,B=15;MARCk
// CR <- 'R'
10. MemRead
// MDR <- Memory
11. MemRead, MDRMux=0; MDRCk
// ALU <- MDR, ALU <- 'Passthrough', T2(Low) <- ALU 
12. AMux=0, ALU=0, CMux=1, C=13; LoadCk
// ...DONE, the Instruction operand has been loaded to the T2 reg....
